@page "/CategorySetup/{EntryType:int}/{CategoryId?}"
@using BlazorInputFile;
@inject ProductService ProServ
@inject CategoryService CatServ
@inject NavigationManager NavigationManager;
@layout RetailLayout
@inject Radzen.DialogService dialogService;

@if (curData == null)
{
    <div class="spinner" ></div>
}
else
{

<RadzenTemplateForm Data="@curData" Submit="@((CategoryDto args) => { OnSubmit(args); })" InvalidSubmit=@OnInvalidSubmit>

    <div class="row head">
        <div class="col-md-12">
            <h1 class="h1 float-left grid-h1">Add New Category</h1>
        </div>
        <div class="col-md-12">
            <RadzenButton Disabled="@AllowDelete" class="btn-delete-gray" Style="margin-right:5px; float: right;" Text="Delete" Click="@((args) => btnDeleteClick(args, curData))" />
            <RadzenButton class="btn-save" Style="margin-right:5px; float: right;" Text="Save" ButtonType="Radzen.ButtonType.Submit" />
            <RadzenButton class="btn-save-new" Style="margin-right:5px; float: right;" Text="SaveAndNew" Click="SaveAndNewClick" />
            <RadzenButton class="cancel" Style="margin-right:5px; float: right;" Text="Cancel" Click="btnCancelClick" />
            <RadzenButton class="btn-save-new" Style="margin-right:5px;float: right;" Icon="arrow_back" Click="@btnbackClick" />
        </div>
    </div>


    <RadzenCard class="grid-card">
        <div class="row my-2">
            <div class="col-md-12 ">
                <div class="row">
                    <RadzenLabel style="width: 140px; color: brown; font-weight: bold; font-size: small; text-decoration-style: solid; border-radius: 0.25rem" Text="ID">
                    </RadzenLabel>
                    <span style="font-size:small;width: 320px;height:28px; font-weight: bold; margin-top:5px;">@curData.ID</span>
                </div>
            </div>
        </div>
        <div class="row my-2">
            <div class="col-md-12 ">
                <div class="row">
                    <RadzenLabel style="width: 140px; color: brown; font-weight: bold; font-size: small; text-decoration-style: solid; border-radius: 0.25rem" Text="NAME">
                    </RadzenLabel>
                    <RadzenTextBox style="font-size:small;width: 270px;height:28px" Name="NAME" @bind-Value="@curData.NAME">
                    </RadzenTextBox>
                    <RadzenRequiredValidator Component="NAME" Text=" NAME is required" Popup="true" Style="position: absolute; width: 110px; margin-top:20px; padding:0px; padding-left:10px" />
                </div>
            </div>
        </div>
        <div class="row my-2">
            <div class="col-md-12 ">
                <div class="row">
                    <RadzenLabel style="color: brown;width: 140px; font-weight: bold; font-size: small; text-decoration-style: solid; border-radius: 0.25rem" Text=" DESCRIPTION ">
                    </RadzenLabel>
                    <RadzenTextBox style="font-size:small;width: 270px;height:28px" Name="DESCRIPTION" @bind-Value="@curData.DESCRIPTION">
                    </RadzenTextBox>
                    <RadzenRequiredValidator Component="DESCRIPTION" Text=" DESCRIPTION is required" Popup="true" Style="position: absolute; width: 150px; margin-top:20px; padding:0px; padding-left:10px" />
                </div>
            </div>
        </div>

    </RadzenCard>
</RadzenTemplateForm>
}
@code {

    string DBResult = "";
    private bool AllowDelete = true;
    private CategoryDto curData = new CategoryDto();

    [Parameter]
    public string CategoryId { get; set; }
    [Parameter]
    public int EntryType { get; set; }
    List<CategoryDto> Categories;

    async Task OnSubmit(CategoryDto Obj)
    {

        var catgories = await CatServ.GetAllCategories();
        var categoryFromDB = await CatServ.GetCategoryById(Obj.ID);

        if (EntryType == 2)
        {
            AllowDelete = false;
        }

        if (catgories.Any(p => p.NAME == Obj.NAME) && EntryType == 1)
        {
            _NotificationService.Notify(MessageError("Duplicate catgory name. Please choose a different name."));
            return;
        }

        // Check for duplicate names only if the name has changed during an edit
        if (EntryType == 2 && Obj.NAME != categoryFromDB.NAME)
        {
            if (catgories.Any(p => p.NAME == Obj.NAME && p.ID != Obj.ID))
            {
                _NotificationService.Notify(MessageError("Duplicate catgory name. Please choose a different name."));
                return;
            }
        }
        if (categoryFromDB != null && Obj.ID == categoryFromDB.ID)
        {

            DBResult = await CatServ.UpdateCategory(Obj);
            if (!(DBResult.Contains("OK")))
            {
                _NotificationService.Notify(MessageError("Process Failed"));
                DBResult = "";
                return;
            }
            else
            {
                _NotificationService.Notify(MessageSucces);
            }

        }
        else
        {

            DBResult = await CatServ.AddCategory(Obj);
            if (!(DBResult.Contains("OK")))
            {
                _NotificationService.Notify(MessageError("Process Failed"));
                DBResult = "";
                return;
            }
            else
            {

                _NotificationService.Notify(MessageSucces);

            }
        }
        NavigationManager.NavigateTo("/CategoriesList");

    }
    async Task SaveAndNewClick()
    {
        // validation
        if (curData.NAME == null || curData.NAME == "")
        {
            _NotificationService.Notify(MessageError("Name Is Empty"));
            return;
        }
        if (curData.DESCRIPTION == null || curData.DESCRIPTION == "")
        {
            _NotificationService.Notify(MessageError("Description Is Empty"));
            return;
        }

        var catgories = await CatServ.GetAllCategories();
        var categoryFromDB = await CatServ.GetCategoryById(curData.ID);

        if (EntryType == 2)
        {
            AllowDelete = false;
        }

        if (catgories.Any(p => p.NAME == curData.NAME) && EntryType == 1)
        {
            _NotificationService.Notify(MessageError("Duplicate catgory name. Please choose a different name."));
            return;
        }

        // Check for duplicate names only if the name has changed during an edit
        if (EntryType == 2 && curData.NAME != categoryFromDB.NAME)
        {
            if (catgories.Any(p => p.NAME == curData.NAME && p.ID != curData.ID))
            {
                _NotificationService.Notify(MessageError("Duplicate catgory name. Please choose a different name."));
                return;
            }
        }
        if (categoryFromDB != null && curData.ID == categoryFromDB.ID)
        {

            DBResult = await CatServ.UpdateCategory(curData);
            if (!(DBResult.Contains("OK")))
            {
                _NotificationService.Notify(MessageError("Process Failed"));
                DBResult = "";
                return;
            }
            else
            {

                _NotificationService.Notify(MessageSucces);

            }

        }
        else
        {
            DBResult = await CatServ.AddCategory(curData);
            if (!(DBResult.Contains("OK")))
            {
                _NotificationService.Notify(MessageError("Process Failed"));
                DBResult = "";
                return;
            }
            else
            {

                _NotificationService.Notify(MessageSucces);

            }
        }

        EntryType = 1;
        curData = new CategoryDto();
        curData.ID = Guid.NewGuid();
        AllowDelete = true;

    }
    void OnInvalidSubmit()
    {

    }

    private async Task btnDeleteClick(MouseEventArgs e, CategoryDto Obj)
    {

        // Check if the category has associated products
        var hasProducts = await ProServ.GetProductsByCategoryId(Obj.ID);

        if (hasProducts != null)
        {
            _NotificationService.Notify(MessageError("Cannot delete the category. It has associated products."));
            return;
        }

        var taskdelete = await dialogService.Confirm("Are you sure you want to delete?", "Confirm Deletion", new ConfirmOptions()
            {
                OkButtonText = "Yes",
                CancelButtonText = "No"
            });

        if (taskdelete == true)
        {
            DBResult = await CatServ.DeleteCategory(Obj.ID);

            if (!(DBResult.Contains("OK")))
            {
                _NotificationService.Notify(MessageError("Error"));
                DBResult = "";
                return;
            }
            else
            {

                _NotificationService.Notify(MessageDelete);
                curData = new CategoryDto();
            }

            NavigationManager.NavigateTo("/CategoriesList");
        }
        else
        {
            _NotificationService.Notify(MessageError("Process Canceled"));

        }
    }

    private async Task btnbackClick()
    {
        NavigationManager.NavigateTo("/CategoriesList");

    }

    private void btnCancelClick(MouseEventArgs e)
    {
        _NotificationService.Notify(MessageCancel);
        NavigationManager.NavigateTo("/CategoriesList");
        StateHasChanged();
    }

    //======================================================================================
    protected override async Task OnInitializedAsync()
    {


        StateHasChanged();

        if (EntryType == 2)
        {
            curData = await CatServ.GetCategoryById(Guid.Parse(CategoryId));
            AllowDelete = false;

        }

        if (EntryType == 1)
        {
            curData = new CategoryDto();
            curData.ID = Guid.NewGuid();

        }
        Categories = await CatServ.GetAllCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        Categories = await CatServ.GetAllCategories();
    }

    public static readonly NotificationMessage MessageSucces =
    new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Retail System", Detail = "Data Saved Successfully", Duration = 5000 };

    public static NotificationMessage MessageError(string msg) =>
       new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Retail System", Detail = msg, Duration = 5000 };

    public static readonly NotificationMessage MessageCancel =
    new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Retail System", Detail = "Process Canceled", Duration = 5000 };

    public static readonly NotificationMessage MessageDelete =
     new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Retail System", Detail = "Category Deleted", Duration = 4000 };

    public static readonly NotificationMessage MessageDeleteFailed =
    new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Retail System", Detail = "Category Has Products Cant be Deleted", Duration = 4000 };




}
